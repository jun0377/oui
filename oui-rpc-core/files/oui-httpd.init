#!/bin/sh /etc/rc.common

# OpenWrt 系统服务初始化脚本，用于启动和管理 OUI HTTP 守护进程

# 启用 procd 进程管理器
USE_PROCD=1
# 服务启动优先级为 60
START=60

# OpenWrt 轻量级证书生成工具
PX5G_BIN="/usr/sbin/px5g"
# 标准 SSL 工具
OPENSSL_BIN="/usr/bin/openssl"

OUI_HTTPD_CERT="/etc/oui-httpd.crt"
OUI_HTTPD_KEY="/etc/oui-httpd.key"

# 证书生成
generate_keys() {
	local cfg="$1"
	local key="$2"
	local crt="$3"
	local days bits country state location organization commonname

	config_get days       "$cfg" days
	config_get bits       "$cfg" bits
	config_get country    "$cfg" country
	config_get state      "$cfg" state
	config_get location   "$cfg" location
	config_get organization "$cfg" organization
	config_get commonname "$cfg" commonname
	config_get key_type   "$cfg" key_type
	config_get ec_curve   "$cfg" ec_curve

	# Prefer px5g for certificate generation (existence evaluated last)
	local GENKEY_CMD=""
	local KEY_OPTS="rsa:${bits:-2048}"
	local UNIQUEID=$(dd if=/dev/urandom bs=1 count=4 | hexdump -e '1/1 "%02x"')
	[ "$key_type" = "ec" ] && KEY_OPTS="ec -pkeyopt ec_paramgen_curve:${ec_curve:-P-256}"
	[ -x "$OPENSSL_BIN" ] && GENKEY_CMD="$OPENSSL_BIN req -x509 -sha256 -outform der -nodes"
	[ -x "$PX5G_BIN" ] && GENKEY_CMD="$PX5G_BIN selfsigned -der"
	[ -n "$GENKEY_CMD" ] && {
		$GENKEY_CMD \
			-days ${days:-730} -newkey ${KEY_OPTS} -keyout "${OUI_HTTPD_KEY}.new" -out "${OUI_HTTPD_CERT}.new" \
			-subj /C="${country:-ZZ}"/ST="${state:-Somewhere}"/L="${location:-Unknown}"/O="${organization:-OpenWrt$UNIQUEID}"/CN="${commonname:-OpenWrt}"
		sync
		mv "${OUI_HTTPD_KEY}.new" "${OUI_HTTPD_KEY}"
		mv "${OUI_HTTPD_CERT}.new" "${OUI_HTTPD_CERT}"
	}
}

start_service() {

	# 证书文件不存在
	[ -s "$OUI_HTTPD_CERT" -a -s "$OUI_HTTPD_KEY" ] || {
		# 加载 /etc/config/oui 配置文件
		config_load oui
		# 遍历配置文件中所有cert类型的配置段，对每个段调用 generate_keys 函数
		config_foreach generate_keys cert
	}

	# 定义一个新的服务实例
	procd_open_instance
	# 服务器启动时要执行的命令
	procd_set_param command /usr/sbin/oui-httpd
	# 启用自动重启功能,当进程异常退出时，procd 会自动重新启动服务
	procd_set_param respawn
	# 完成服务实例定义,提交配置到 procd
	procd_close_instance
}

# 服务触发器，当 /etc/config/oui 配置文件发生变化时，自动重新加载服务
service_triggers() {
	procd_add_reload_trigger "oui"
}
